<!DOCTYPE html>
<html lang="ja">

<head>
	<META http-equiv="Content-Type" content="text/html;charset=utf-8">
	<title>DDSを応用した任意サイクルの生成</title>
<!--	<meta http-equiv="X-UA-Compatible" content="IE=edge"> -->
	<META NAME="Robots" CONTENT="index, follow">
	<META NAME="keywords" CONTENT="FPGA, Verilog, VHDL">
		
	<meta name="twitter:card" content="summary">
	<meta name="twitter:site" content="@pgate1">
	<meta name="twitter:title" content="DDSを応用した任意サイクルの生成">
	<meta name="twitter:url" content="https://pgate1.at-ninja.jp/memo/dds/dds.htm">
	<meta name="twitter:image" content="https://pgate1.at-ninja.jp/memo/dds/wave.png">
	<meta name="twitter:description" content="
		FPGAでの同期設計で使用する、任意サイクル生成回路のためのパラメータ計算機です。
	">
	<meta property="og:url" content="https://pgate1.at-ninja.jp/memo/dds/dds.htm">
	<meta property="og:title" content="DDSを応用した任意サイクルの生成">
	<meta property="og:image" content="https://pgate1.at-ninja.jp/memo/dds/wave.png">
	<meta property="og:description" content="
	FPGAでの同期設計で使用する、任意サイクル生成回路のためのパラメータ計算機です。
	">
</head>

<body bgcolor="#FAF3DF" onload="clear()">

<!-- [FC2 Analyzer] //analyzer.fc2.com/  -->
<script language="javascript" src="//analyzer5.fc2.com/ana/processor.php?uid=1044035" type="text/javascript"></script>
<noscript><div align="right"><img src="//analyzer5.fc2.com/ana/icon.php?uid=1044035&ref=&href=&wid=0&hei=0&col=0" /></div></noscript>
<!-- [FC2 Analyzer]  -->

<table width="80%" align=center><tr><td>

	<table border=0 width=100%><tr><td>
	<a href=../../><b>HOME</b></a>
	</td><td align=right>
	2024/10/05
	</td></tr></table>
	
	<hr>

		<h1>DDS（Direct Digital Synthesizer）を応用した任意サイクルの生成</h1>
		<p>
			FPGAに実装するタイマ回路など同期設計で任意サイクルを使用したいとき、
			ベースクロックから任意サイクルのイネーブル信号を生成する回路を使います。
			ここではその任意サイクルを生成するためのパラメータを計算できます。
			<p>
			なお本回路はベースクロック信号の精度に依存するため、
			イネーブル信号の精度を完全に保証するものではありませんのでご了承ください。
			<s>てい倍はできません</s>逓倍のパラメータも出せるみたいです。
		<p>
		<table border="0" style="background-color:#eeffee;padding:20px">
		<tr>
			<td style="text-align:right; vertical-align:middle; padding-bottom:1em">モード＝
			</td>
			<td style="padding-bottom:1em">
				<input type="radio" name="mode" value="div" id="mode_div" onClick="ModeSelect('div')" checked><label for="mode_div">分周</label>
				<input type="radio" name="mode" value="mul" id="mode_mul" onClick="ModeSelect('mul')"        ><label for="mode_mul">逓倍</label>
			</td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align:top; padding-bottom:1em">ベースクロック＝
			</td>
			<td style="padding-bottom:1em">
				<input type="text" id="base_clock" size="12" style="text-align:right;font-size:1em" value="50000000" onInput="convertToPrefixedNumber('base_clock', 'base_prefix')">　<span id="base_prefix"></span>Hz<br>
				<!-- <small>クロック周波数を入力してください。</small> -->
			</td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align:top; padding-bottom:1em">ターゲットサイクル＝</td>
			<td style="padding-bottom:1em">
				<input type="text" id="target_cycle" size="12" style="text-align:right;font-size:1em" value="5369318" onInput="convertToPrefixedNumber('target_cycle', 'target_prefix')">　<span id="target_prefix"></span>サイクル<br>
				<!-- <small>ターゲットサイクル数はクロック周波数以下です。</small> -->
			</td>
		</tr>
			<td style="text-align:right; vertical-align:top; padding-bottom:1em; white-space:nowrap">カウンタ最大ビット幅＝</td>
			<td style="padding-bottom:1em">
				<input type="text" id="bit_max" size="12" style="text-align:right;font-size:1em" value="30"> bit<br>
				<small>計算するカウンタのビット幅が大きいほど精度が良くなります。<br>
					誤差が0になればそこで計算を打ち切ります。</small>
			</td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align:top; padding-bottom:1em">HDL出力：</td>
			<td style="padding-bottom:1em">
				<input type="radio" name="hdl_type" value="verilog" id="hdl_verilog" checked><label for="hdl_verilog">VerilogHDL</label>
				<input type="radio" name="hdl_type" value="vhdl"    id="hdl_vhdl"           ><label for="hdl_vhdl">VHDL</label>
				<input type="radio" name="hdl_type" value="sflp"    id="hdl_sflp"           ><label for="hdl_sflp">SFL+</label>
			</td>
		</tr>
		<tr>
			<td></td>
			<td>
				<input type="button" id="run" value="計算する" onclick="dds_calc()">
			</td>
		</tr>
		</table>
		<p>
		
			<!--
			<textarea id="result_text" spellcheck="false" rows="1" cols="100"></textarea>
			-->
			log：<input type="text" id="result_text" size="60" readonly>
			<p>
			計算結果：許容できる誤差のビット幅を選択してください。<br>
			<select id="result_select" spellcheck="false" size="2" style="overflow:hidden;font-size:1em"></select>
			<p>
			HDL出力：<br>
			<textarea id="hdl_code" spellcheck="false" rows="30" cols="80" readonly></textarea>
		<p>

		<hr>
		<h2>解説</h2>
		<h3>分周モードについて</h3>
DDSを応用したカウンタでベースクロックから任意サイクルのイネーブル信号を生成します。
特徴はイネーブル信号が偏っていないことです。
FPGAでの同期設計のときに任意サイクル生成回路として使用します。
非同期回路じゃなくてよい場合はこういう手もあるかなと。
<p>
例えば簡単な例だと、ベースクロック50MHzでターゲットサイクルが30MHzであれば、
その比は5:3なので、パラメータはそれぞれ加算値3、最大値5となります。
<p>
	以下は疑似コードです。
<table cellpadding="10" bgcolor="#EEFFEE"><tr><td><pre>
circuit DDS_5to3
{
	input rst, clk;
	output enable;

	wire add = 3; // 加算値
	wire max = 5; // 最大値
	reg count;

	if(clk){
		if(rst){
			count = 0;
		}
		else if(count &lt; max){
			count += add;
		}
		else{
			count += add - max;
			enable();
		}
	}
}
</pre></td></tr></table>
<p>
５クロックに３回enable信号がHiになります。これは簡単ですね。
あくまでイネーブル信号であり、30MHzのクロックではないことに注意してください。<br>
<img src=wave.png>
<p>
	違う例では、ベースクロック50MHzでターゲットサイクルが33.8688MHz（PlayStationのCPU周波数）だと、
	最大公約数が3200です。
	それぞれ最大公約数で割ると、加算値10584、最大値15625となります。
	これは12bitのカウンタを使うことで誤差が0となり、最大公約数が大きいほどカウンタのビット幅が少なくて済むわけです
	（ここでの誤差とは、理想的なターゲット周波数と実際のイネーブルサイクルの差）。
<p>
	では最大公約数が小さい場合どうしましょうか？
	もちろんカウンタのbit幅を増やせば増やすほど誤差は小さくなります。
	ただし、誤差は小さくしたいけど、カウンタのビット幅もできるだけ小さくしたい。
	そこで適切な加算値と最大値をパラメータとして見つける必要があります。
	<p>
	例えばファミコンの描画プロセッサの動作周波数は5.369318MHzです。
	これをベースクロック50MHzから生成するとなると、パラメータ探索結果は以下の通り。
<pre>
	カウンタ 5bit  加算値=      1  最大値=       9  誤差=+186237.55555555596947669983
	カウンタ 6bit  加算値=      3  最大値=      28  誤差= -12175.14285714272409677505
	カウンタ 8bit  加算値=     13  最大値=     121  誤差=  +2582.82644628081470727921
	カウンタ 9bit  加算値=     16  最大値=     149  誤差=   -190.48322147689759731293
	カウンタ11bit  加算値=    109  最大値=    1015  誤差=   +140.12807881738990545273
	カウンタ12bit  加算値=    189  最大値=    1760  誤差=     +0.18181818164885044098
	カウンタ18bit  加算値=  14002  最大値=  130389  誤差=     -0.03606132417917251587
	カウンタ19bit  加算値=  16837  最大値=  156789  誤差=     +0.00062504410743713379
	カウンタ20bit  加算値=  50322  最大値=  468607  誤差=     -0.00005548354238271713
	カウンタ22bit  加算値= 218125  最大値= 2031217  誤差=     -0.00000295415520668030
	カウンタ24bit  加算値= 822178  最大値= 7656261  誤差=     +0.00000026077032089233
	カウンタ26bit  加算値=2684659  最大値=25000000  誤差=      0.00000000000000000000
</pre>

結果、カウンタが26bitあれば誤差0のイネーブルサイクルが作れます。
ただ、（ベースクロック自体の誤差から見て十分小さい誤差かどうか判断して）
誤差をいくらか許容するならば、
カウンタ18bitあたりの加算値と最大値を選択することで、
レジスタ数と回路規模を抑制することができます。
<p>
また、ここで誤差のプラスはターゲットサイクルに対し速いサイクルが、
マイナスは遅いサイクルが生成されることを意味します。
動作期間が決まっている場合、遅いサイクルだと間に合わなくなることがあるため、
速いサイクルを使用する方が良いようです。

<h3>逓倍モードについて</h3>

PLLのIPを使用するとき、IPジェネレータでターゲット周波数を指定するかと思います。
場合によって分周・逓倍のパラメータが不明な場合に、
この計算機の「逓倍モード」でターゲットサイクルを指定すればパラメータが分かります。
なんか同じロジックで動いたので追加しました。
<p>
例えば、27MHzからHDMI用に124.875MHzを生成したくPLLを生成したとき、
タイミング制約で指定する -multiply_by と -divide_by の値が必要です。
パラメータ探索結果は以下の通り。
<pre>
	出力周波数=108000000Hz Mul= 4 Div=1 誤差=-16875000.000000
	出力周波数=135000000Hz Mul= 5 Div=1 誤差=+10125000.000000
	出力周波数=121500000Hz Mul= 9 Div=2 誤差= -3375000.000000
	出力周波数=126000000Hz Mul=14 Div=3 誤差= +1125000.000000
	出力周波数=124200000Hz Mul=23 Div=5 誤差=  -675000.000000
	出力周波数=124875000Hz Mul=37 Div=8 誤差=        0.000000
</pre>
Mul=37 Div=8 が分かりました。
まぁ、入出力周波数をそれぞれ最大公約数3375000で割れば出てくるんですけどね。
あと大抵、IPジェネレータが生成したファイルに書かれてます。


<hr>
<center>Copyright(C)2020 pgate1 All Rights Reserved.</center>
</td></tr></table>

<div style="padding:5em"></div>

<script language="javascript" type="text/javascript">

	let result_select = [];

	function clear()
	{
		document.getElementById("result_text").value = "";
		document.getElementById("result_select").innerHTML = "";
		result_select.length = 0;
		document.getElementById("hdl_code").value = "";

		convertToPrefixedNumber('base_clock', 'base_prefix');
		convertToPrefixedNumber('target_cycle', 'target_prefix');
	}
	
	function ModeSelect(mode)
	{
		if(mode=="div"){
			document.getElementById("base_clock").value = 50000000; // DE0
			document.getElementById("target_cycle").value = 5369318; // NES PPU
			document.getElementById("bit_max").value = 30;
		}
		if(mode=="mul"){
			document.getElementById("base_clock").value = 27000000; // TangNano9K
			document.getElementById("target_cycle").value = 124875000; // HDMI	
			document.getElementById("bit_max").value = 8;
		}

		clear();
	}

	function convertToPrefixedNumber(number_input, number_prefix)
	{
		let input = document.getElementById(number_input).value;
		let output = document.getElementById(number_prefix);
		let number = parseFloat(input);

		if(isNaN(number)){
			output.textContent = " ";
			return;
		}

		let decimal_place = 0;
		let number_str = number.toString(); // 小数点以下15桁目まで
		if(number_str.includes('.')){
			// 小数点以下の部分の長さを取得
			decimal_place = number_str.split('.')[1].length;
		}
		//document.getElementById("result_text").value = decimal_place.toString();
		// 小数点以下があるなら小数点以下有効桁数を確保する
		// 　4005.03が4.0050300000000005にならないように

		if(number >= 1_000_000_000_000){
			let divided_number = number / 1_000_000_000_000;
			if(divided_number.toString().includes('.')) decimal_place += 12;
			output.textContent = parseFloat(divided_number.toFixed(decimal_place)) + " T";
		}
		else if(number >= 1_000_000_000){
			let divided_number = number / 1_000_000_000;
			if(divided_number.toString().includes('.')) decimal_place += 9;
			output.textContent = parseFloat(divided_number.toFixed(decimal_place)) + " G";
		}
		else if(number >= 1_000_000){ 
			let divided_number = number / 1_000_000;
			if(divided_number.toString().includes('.')) decimal_place += 6;
			output.textContent = parseFloat(divided_number.toFixed(decimal_place)) + " M";
		}
		else if(number >= 1_000){ 
			let divided_number = number / 1_000;
			if(divided_number.toString().includes('.')) decimal_place += 3;
			output.textContent = parseFloat(divided_number.toFixed(decimal_place)) + " k";
		}
		else{ // 1,000 > n > 0
			output.textContent = number.toFixed(decimal_place) + " ";
		}
	}

	function euclid(a, b)
	{
		if(b==0) return a;
		return euclid(b, a % b);
	}

	let mode;
	let base, target;

	function dds_calc()
	{
		clear();

		let mode_elements = document.getElementsByName("mode");
		if (mode_elements.item(0).checked) mode = "div";
		if (mode_elements.item(1).checked) mode = "mul";

		base = parseFloat(document.getElementById("base_clock").value);
		//alert(base.toString());
		if(base==="" || isNaN(base) || base<=0){
			document.getElementById("result_text").value = "ベースクロックは正の実数を入力してください。";
			return;
		}
		target = parseFloat(document.getElementById("target_cycle").value);
		if(target==="" || isNaN(target) || target<=0){
			document.getElementById("result_text").value = "ターゲットサイクルは正の実数を入力してください。";
			return;
		}
		if(mode=="div" && target > base){
			document.getElementById("result_text").value = "ターゲットサイクルはベースクロック以下としてください。";
			return;
		}
		/*
		if(mode=="mul" && target < base){
			document.getElementById("result_text").value = "ターゲットサイクルはベースクロック以上としてください。";
			return;
		}
		*/
		let bit_max = document.getElementById("bit_max").value;
		let integerPattern = /^\d+$/; // 数字のみかの正規表現
		if(bit_max==="" || !integerPattern.test(bit_max) || bit_max<=0){
			document.getElementById("result_text").value = "カウンタ最大ビット幅は1以上を入力してください。";
			return;
		}
		bit_max = parseInt(bit_max);

		/*
		//alert(target.toString() + " " + base.toString());
		if(target > base){
			document.getElementById("result_text").value = "てい倍はできません。";
			return;
		}
		*/

		const gcd = euclid(Math.floor(base), Math.floor(target));
		const lcm = base * target / gcd;
		//alert("最大公約数"+gcd.toString()+" 最小公倍数"+lcm.toString());
		if(gcd == 1){
			if(window.confirm("最大公約数が1のため、処理に時間がかかる可能性があります。\n実行しますか？") == false){
				document.getElementById("result_text").value = "キャンセルしました。";
				return;
			}
		}

		document.getElementById("result_text").value = "計算中...";

		let best_counter_bit_width = 0, best_add, best_max;
		let result = "";
		let result_count = 0;
		let best_gosa = base;
		let add_bit;
		for(add_bit=1; add_bit<bit_max; add_bit++){
			let add;
			for(add=1<<(add_bit-1); add<1<<add_bit; add++){
				
				const max = Math.round(add * base / target); // 四捨五入
			//	const max = Math.floor(add * base / target); // 切り捨て
			//	const max = Math.ceil(add * base / target); // 切り上げ
				// カウンタのビット幅を求める
				const counter_bit_width = max.toString(2).length + 1;
				//alert(375.toString(2).length); return;

			//	const hz = base * (add / max); // 誤差が大きい
				const hz = base * add / max;
				const gosa = hz - target; // 算出したhzの方が大きい時は誤差はプラスにする
				if(Math.abs(gosa) < Math.abs(best_gosa) && counter_bit_width <= bit_max ){
					best_add = add;
					best_max = max;
					best_gosa = gosa;
					//alert(hz.toString());
		
					// 誤差(PPM:Parts Per Million)
					const best_ppm = 1000000 * Math.abs(best_gosa) / target;

					let str = "";
					str += "カウンタ" + counter_bit_width.toString() + "bit ";
				//	str += hz.toFixed(12) + "Hz ";
					str += "加算値=" + best_add.toString() /*+ "(0x" + best_add.toString(16).toUpperCase() + ")"*/ + " ";
					str += "最大値=" + best_max.toString() /*+ "(0x" + best_max.toString(16).toUpperCase() + ")"*/ + " ";
					str += "誤差=" + (best_gosa > 0 ? "+" : "") + best_gosa.toFixed(20) + " ";
				//	str += best_ppm.toFixed(10) + "ppm";
					str += "\n";

					// 前回の記録と同じビット幅なら上書きする
					if(mode=="div" && counter_bit_width == best_counter_bit_width){
						const p = result.lastIndexOf("カウンタ");
						if(p != -1){
							result = result.slice(0, p);
						}
					}
					result += str;
					best_counter_bit_width = counter_bit_width;

					if(mode=="div"){
						result_select[counter_bit_width] = {add:best_add, max:best_max, gosa:best_gosa, ppm:best_ppm};
					}
					if(mode=="mul"){
						result_select[result_count] = {add:best_add, max:best_max, gosa:best_gosa, hz:hz};
						result_count++;
					}

					// 誤差0で計算打ち切り
					if(best_gosa == 0 /*|| best_gosa == Number.MIN_VALUE*/){
						add_bit = bit_max;
						break;
					}
				}
				// ビット幅で打ち切り
				if(counter_bit_width > bit_max){
					break;
				}
			}
		}

		if(result.length){
			//result += "計算終了☆(ゝω･)v";
			result = "計算終了☆(ゝω･)v";
			document.getElementById("result_text").value = result;

			let select = document.getElementById("result_select");
			select.size = Object.keys(result_select).length;
			result_select.forEach(function(obj, index){
				//console.log(index.toString() + ", " + obj.add.toString());
				let str = "";
				if(mode=="div"){
					str += "カウンタ" + index.toString() + "bit ";
					//str += hz.toFixed(12) + "Hz ";
					str += "加算値=" + obj.add.toString() + " ";
					str += "最大値=" + obj.max.toString() + " ";
					str += "誤差=" + (obj.gosa > 0 ? "+" : "") + obj.gosa.toFixed(20) + " ";
				//	str += obj.ppm.toFixed(10) + "ppm";
				}
				if(mode=="mul"){
					str += "出力周波数=" + obj.hz.toString() + "Hz ";
					str += "Mul=" + obj.add.toString() + " ";
					str += "Div=" + obj.max.toString() + " ";
					str += "誤差=" + (obj.gosa > 0 ? "+" : "") + obj.gosa.toFixed(10) + " ";
				}
				//document.getElementById("hdl_code").value += str + "\n";

				let option = document.createElement("option");
				option.value = index.toString();
				option.text = str;
				select.appendChild(option);
			});

			// デフォルトで最後のものを選択
			select.selectedIndex = select.size - 1;
			change_result();
		}
		else{
			document.getElementById("result_text").value = "候補がありません。カウンタ最大ビット幅を増やしてください。";
		}
	}

	function change_result() {
		if(mode=="mul") return;

		let selectedOptionElement = document.getElementById("result_select");
		console.log("Selected option: " + selectedOptionElement.value);

		const hdl_elements = document.getElementsByName("hdl_type");
		let hdl_type = "verilog"; // 初期値
		for(let i=0; i<hdl_elements.length; i++){
			if(hdl_elements[i].checked){
				hdl_type = hdl_elements[i].value;
				break;
			}
		}
		output_hdl(hdl_type, selectedOptionElement.value);
	}

	document.addEventListener("DOMContentLoaded", function() {
		document.getElementById("result_select").addEventListener("change", change_result);
	});

	function output_hdl(hdl_type, counter_bit_width)
	{
		let code = document.getElementById("DDS_" + hdl_type).innerHTML;

		const base_str = base.toString().split('.').join('');
		const target_str = target.toString().split('.').join('');
		code = code.replace(hdl_type, base_str+"to"+target_str);

		let str = "";
		str += "カウンタ " + counter_bit_width.toString() + "bit、";
		str += "加算値 " + result_select[counter_bit_width].add.toString() + "、";
		str += "最大値 " + result_select[counter_bit_width].max.toString() + "、";
		str += "誤差 " + (result_select[counter_bit_width].gosa > 0 ? "+" : "") + result_select[counter_bit_width].gosa.toFixed(10);
		code = code.replace("_COMMENT_", str);

		code = code.replace("_COUNT_WIDTH_", counter_bit_width.toString());
		code = code.replace("_MAX_NUM_", result_select[counter_bit_width].max.toString());
		code = code.replace("_ADD_NUM_", result_select[counter_bit_width].add.toString());

		// &lt; を < に置換
		code = code.split("&lt;").join('<');
		// &gt; を > に置換
		code = code.split("&gt;").join('>');

		document.getElementById("hdl_code").value = code;
	}

</script>

<pre hidden id="DDS_sflp">
// _COMMENT_

%d COUNT_WIDTH _COUNT_WIDTH_

circuit DDS_sflp
{
	instrout enable;

	sel add&lt;COUNT_WIDTH&gt;;
	sel max&lt;COUNT_WIDTH&gt;;
	reg_wr count&lt;COUNT_WIDTH&gt;;
	sel sa&lt;COUNT_WIDTH&gt;;

	add = _ADD_NUM_;
	max = _MAX_NUM_;

	sa = count - max;

	if(sa&lt;COUNT_WIDTH-1&gt;){ // count &lt; max
		count += add;
	}
	else{
		count := sa + add;
		enable();
	}
}
</pre>
	
<pre hidden id="DDS_verilog">
// _COMMENT_

module DDS_verilog (
	input wire rst;
	input wire clk;
	output wire enable;
);
	localparam COUNT_WIDTH = _COUNT_WIDTH_;

	wire [COUNT_WIDTH-1:0] add;
	wire [COUNT_WIDTH-1:0] max;
	reg  [COUNT_WIDTH-1:0] count;
	wire [COUNT_WIDTH-1:0] sa;

	assign add = COUNT_WIDTH'd_ADD_NUM_;
	assign max = COUNT_WIDTH'd_MAX_NUM_;

	assign sa = count - max;

	always @(posedge clk) begin
		if(rst)
			count &lt;= COUNT_WIDTH'd0;
		else if(sa[COUNT_WIDTH-1]) // count &lt; max
			count &lt;= count + add;
		else
			count &lt;= sa + add;
	end

	assign enable = ~sa[COUNT_WIDTH-1];

endmodule
</pre>
	
<pre hidden id="DDS_vhdl">
-- _COMMENT_

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity DDS_vhdl is
	port(
		rst, clk : in std_logic;
		enable : out std_logic
	);
end DDS_vhdl;

architecture RTL of DDS_vhdl is

constant COUNT_WIDTH : integer := _COUNT_WIDTH_;
constant ADD_NUM : std_logic_vector(COUNT_WIDTH-1 downto 0)
	:= std_logic_vector(to_unsigned(_ADD_NUM_, COUNT_WIDTH));
constant MAX_NUM : std_logic_vector(COUNT_WIDTH-1 downto 0)
	:= std_logic_vector(to_unsigned(_MAX_NUM_, COUNT_WIDTH));

signal add   : std_logic_vector(COUNT_WIDTH-1 downto 0);
signal max   : std_logic_vector(COUNT_WIDTH-1 downto 0);
signal count : std_logic_vector(COUNT_WIDTH-1 downto 0);
signal sa    : std_logic_vector(COUNT_WIDTH-1 downto 0);

begin

	add &lt;= ADD_NUM;
	max &lt;= MAX_NUM;

	sa &lt;= count - max;

	process(clk) begin
		if rising_edge(clk) then
			if rst='1' then
				count &lt;= (others => '0');
			elsif sa(COUNT_WIDTH-1)='1' then -- count &lt; max
				count &lt;= count + add;
			else
				count &lt;= sa + add;
			end if;
		end if;
	end process;

	enable &lt;= not sa(COUNT_WIDTH-1);

end RTL;
</pre>

</body>
</html>
